# For making jumps in parameter space

import numpy as np
import pickle

def get_new_parameters(list_of_sigmas,list_of_recent_guesses):
    '''
    Generates a randomly selected point in n-dimensional space, where n is the length of each input list.
    
    Inputs are a list of standard deviations and a list of parameter values.
    Outputs are a list of parameter values generated by an N-dimensional Gaussian.

    The generating Gaussian has a mean of list_of_recent_guesses and standard deviations of list_of_sigmas.

    Ex:
    old_guesses = [2,3]
    sigmas = [1,1]
    get_new_parameters(sigmas,old_guesses)
    
    '''
    new_guesses = [np.random.normal(point,sigma) for point,sigma in zip(list_of_recent_guesses,list_of_sigmas)]
    return new_guesses



def save_chain(chain_in,sys=1):
    '''
    Saves the Markov chain in the local_code/adam directory as a pickle file.

    Inputs are chain_in, the 2-D list of floats forming a Markov chain, and sys, a toggle indicating
    whether you included systematic errors in the likelihood calculation for this chain. (1 to include
    the errors, 0 to not.)
    '''
    if sys == 1:
        pickle.dump(chain_in,open('local_code/adam/chain.pickle','wb'))
    else:
        pickle.dump(chain_in,open('local_code/adam/chain_no_sys_errors.pickle','wb'))


def load_chain(sys=1):
    '''
    Loads a Pickled Markov chain from the local_code/adam directory.

    Input is sys, a toggle for whether you'd like to load the chain with (1) or without (0) the inclusion
    of systematic errors.
    '''
    if sys==1:
        chain_out = pickle.load(open('local_code/adam/chain.pickle','rb'))
    else:
        chain_out = pickle.load(open('local_code/adam/chain_no_sys_errors.pickle','rb'))
    return chain_out



